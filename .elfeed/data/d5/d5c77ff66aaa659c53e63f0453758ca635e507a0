<!-- SC_OFF --><div class="md"><p>I&#39;m a hardware designer, and specifically I design circuit boards that use PCIe interfaces. Something I&#39;ve been tasked with, and not being as much of a software person it&#39;s rather daunting, is to try to compare throughput and latency between two devices that are connected via PCIe.</p> <p>When I read about what&#39;s involved with getting data to the CPU-attached (NOT PCH-attached) PCIe bus, it seems not only complicated as it would involve (I think) writing my own (kernel mode? user mode?) driver(s), but would involve complicated low-level stuff like DMA.</p> <p>The theory of what I want to do is pretty straightforward: I&#39;ve built two PCIe expansion cards with two different controller chips [(I&#39;m specifically avoiding getting into what they do) that have their own drivers, but those drivers were written by the IC manufacturers, and don&#39;t give low-level APIs for doing stress-test or burn-in-test type stuff] that attach to the PCIe bus. </p> <p>I know that there&#39;s a linux tool called &quot;lspci&quot; that gives link and training info (i think, i don&#39;t really know the extent of its capabilities, but it doesn&#39;t seem to be for sending/receiving data) but what I want is to try to send data, which will get looped back and received some very short time later.</p> <p>What I want to do though is to send *something* over the PCIe bus to a device under test, and try to measure total latency (time that&#39;s added to the transmit rate due to processing overhead, physical propagation delay, etc etc) along with throughput in order to compare the latency of one device with another. I realize I could spend a couple hundred thousand bucks on network profiling and high speed characterization equipment, but I feel like there has to something already in linux or something available out there that would basically let me measure the loop time without a bunch of OS/processing overhead.</p> <p>From what I&#39;ve read, doing anything from within an OS that involves the processor itself (as opposed to DMA operations) significantly decreases your throughput/bandwidth/performance. The boards I&#39;m designing are for gen 4 PCIe, which has a single lane speed of 16Gbps, and in my initial hardware setup I&#39;ll be testing using a X4 link which is 64Gbps. My gut tells me that from within an OS you can&#39;t get anywhere near that speed for measurements&#39; sake. I&#39;ve read things like &quot;at gen 4, you get at best 25% efficiency&quot; meaning if you&#39;re writing code or running tools that aren&#39;t very low level and using DMA, you&#39;re only going to be able to read and/or write at 16Gbps on a X4 gen 4 link which has a max theoretical speed of 64Gbps. That&#39;s what I read anyway; I have no idea if that&#39;s true.</p> <p>I realize that if everything is equal on the PCIe root complex (host?) side, then it shouldn&#39;t matter if I&#39;m only getting data to the card(s) at 25% the max theoretical rate, as long as it&#39;s the same for both cards, but I&#39;m also want to be able to show that, if the card is presented with data at anywhere near 64Gbps on a X4 link, that the card can handle it (so I&#39;m proving out my hardware at the same time as comparing latency on two device).</p> <p>Anyway, my question is: does anyone know of a way from within linux that I test and measure the latency? I&#39;m fine if you say I have to build a custom kernel and lightweight filesystem or something as long as I can do it with yocto/bitbake, peta, makebox, whatever; and even if you said &quot;writing drivers for PCIe is easy&quot; and show me how to do it, i&#39;ll do it. i&#39;m just concerned that what I want to do can&#39;t actually be done at the speed I want to do it which is really really fast (or rather with high precision and repeatable vis-a-vis a 64Gbps link).</p> <p>Or am I just overthinking this and I should write 100GB worth of bits to the PCIe bus (somehow; again I don&#39;t even know how to write data to the PCIe bus), and have the devices loop those bits back? Though that sounds very much like messing with the device&#39;s drivers :/</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/dimmu1313"> /u/dimmu1313 </a> <br/> <span><a href="https://www.reddit.com/r/linux/comments/scwpjb/best_way_for_fair_throughput_comparision/">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/linux/comments/scwpjb/best_way_for_fair_throughput_comparision/">[comments]</a></span>